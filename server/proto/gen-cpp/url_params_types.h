/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef url_params_TYPES_H
#define url_params_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>






class UrlParams {
 public:

  static const char* ascii_fingerprint; // = "B1CC47B42182A69567CF4350EBEA1441";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xCC,0x47,0xB4,0x21,0x82,0xA6,0x95,0x67,0xCF,0x43,0x50,0xEB,0xEA,0x14,0x41};

  UrlParams() : uri(), query() {
  }

  virtual ~UrlParams() throw() {}

  std::map<std::string, std::string>  url_kvs;
  std::string uri;
  std::string query;
  std::vector<std::string>  query_splits;
  std::vector<std::string>  kv_pairs;

  void __set_url_kvs(const std::map<std::string, std::string> & val) {
    url_kvs = val;
  }

  void __set_uri(const std::string& val) {
    uri = val;
  }

  void __set_query(const std::string& val) {
    query = val;
  }

  void __set_query_splits(const std::vector<std::string> & val) {
    query_splits = val;
  }

  void __set_kv_pairs(const std::vector<std::string> & val) {
    kv_pairs = val;
  }

  bool operator == (const UrlParams & rhs) const
  {
    if (!(url_kvs == rhs.url_kvs))
      return false;
    if (!(uri == rhs.uri))
      return false;
    if (!(query == rhs.query))
      return false;
    if (!(query_splits == rhs.query_splits))
      return false;
    if (!(kv_pairs == rhs.kv_pairs))
      return false;
    return true;
  }
  bool operator != (const UrlParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UrlParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UrlParams &a, UrlParams &b);



#endif
