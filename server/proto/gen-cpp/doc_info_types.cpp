/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "doc_info_types.h"

#include <algorithm>



const char* DocInfo::ascii_fingerprint = "F88B504CB7AF6BBC064A7F0A5206A846";
const uint8_t DocInfo::binary_fingerprint[16] = {0xF8,0x8B,0x50,0x4C,0xB7,0xAF,0x6B,0xBC,0x06,0x4A,0x7F,0x0A,0x52,0x06,0xA8,0x46};

uint32_t DocInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_raw_id = false;
  bool isset_supply_price_min = false;
  bool isset_supply_price_max = false;
  bool isset_spec = false;
  bool isset_pics = false;
  bool isset_customer_id = false;
  bool isset_updated_time = false;
  bool isset_created_time = false;
  bool isset_supply_longitude = false;
  bool isset_supply_latitude = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->raw_id);
          isset_raw_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->supply_price_min);
          isset_supply_price_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->supply_price_max);
          isset_supply_price_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->spec);
          isset_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pics);
          isset_pics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->customer_id);
          isset_customer_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updated_time);
          isset_updated_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->created_time);
          isset_created_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->supply_longitude);
          isset_supply_longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->supply_latitude);
          isset_supply_latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_raw_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_supply_price_min)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_supply_price_max)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pics)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_customer_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_updated_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_created_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_supply_longitude)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_supply_latitude)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DocInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DocInfo");

  xfer += oprot->writeFieldBegin("raw_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->raw_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supply_price_min", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->supply_price_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supply_price_max", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->supply_price_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spec", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->spec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pics", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->pics);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customer_id", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->customer_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updated_time", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->updated_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created_time", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->created_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supply_longitude", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->supply_longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supply_latitude", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->supply_latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DocInfo &a, DocInfo &b) {
  using ::std::swap;
  swap(a.raw_id, b.raw_id);
  swap(a.supply_price_min, b.supply_price_min);
  swap(a.supply_price_max, b.supply_price_max);
  swap(a.spec, b.spec);
  swap(a.pics, b.pics);
  swap(a.customer_id, b.customer_id);
  swap(a.updated_time, b.updated_time);
  swap(a.created_time, b.created_time);
  swap(a.supply_longitude, b.supply_longitude);
  swap(a.supply_latitude, b.supply_latitude);
}


