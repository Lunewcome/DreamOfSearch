/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef doc_info_TYPES_H
#define doc_info_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>






class DocInfo {
 public:

  static const char* ascii_fingerprint; // = "F88B504CB7AF6BBC064A7F0A5206A846";
  static const uint8_t binary_fingerprint[16]; // = {0xF8,0x8B,0x50,0x4C,0xB7,0xAF,0x6B,0xBC,0x06,0x4A,0x7F,0x0A,0x52,0x06,0xA8,0x46};

  DocInfo() : raw_id(0), supply_price_min(0), supply_price_max(0), spec(), pics(0), customer_id(), updated_time(0), created_time(0), supply_longitude(0), supply_latitude(0) {
  }

  virtual ~DocInfo() throw() {}

  int32_t raw_id;
  double supply_price_min;
  double supply_price_max;
  std::string spec;
  int32_t pics;
  std::string customer_id;
  int32_t updated_time;
  int32_t created_time;
  double supply_longitude;
  double supply_latitude;

  void __set_raw_id(const int32_t val) {
    raw_id = val;
  }

  void __set_supply_price_min(const double val) {
    supply_price_min = val;
  }

  void __set_supply_price_max(const double val) {
    supply_price_max = val;
  }

  void __set_spec(const std::string& val) {
    spec = val;
  }

  void __set_pics(const int32_t val) {
    pics = val;
  }

  void __set_customer_id(const std::string& val) {
    customer_id = val;
  }

  void __set_updated_time(const int32_t val) {
    updated_time = val;
  }

  void __set_created_time(const int32_t val) {
    created_time = val;
  }

  void __set_supply_longitude(const double val) {
    supply_longitude = val;
  }

  void __set_supply_latitude(const double val) {
    supply_latitude = val;
  }

  bool operator == (const DocInfo & rhs) const
  {
    if (!(raw_id == rhs.raw_id))
      return false;
    if (!(supply_price_min == rhs.supply_price_min))
      return false;
    if (!(supply_price_max == rhs.supply_price_max))
      return false;
    if (!(spec == rhs.spec))
      return false;
    if (!(pics == rhs.pics))
      return false;
    if (!(customer_id == rhs.customer_id))
      return false;
    if (!(updated_time == rhs.updated_time))
      return false;
    if (!(created_time == rhs.created_time))
      return false;
    if (!(supply_longitude == rhs.supply_longitude))
      return false;
    if (!(supply_latitude == rhs.supply_latitude))
      return false;
    return true;
  }
  bool operator != (const DocInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DocInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DocInfo &a, DocInfo &b);



#endif
