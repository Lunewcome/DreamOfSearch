/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "raw_doc_types.h"

#include <algorithm>



const char* RawDoc::ascii_fingerprint = "DF9D44499F950010577420E5A1FA8DF2";
const uint8_t RawDoc::binary_fingerprint[16] = {0xDF,0x9D,0x44,0x49,0x9F,0x95,0x00,0x10,0x57,0x74,0x20,0xE5,0xA1,0xFA,0x8D,0xF2};

uint32_t RawDoc::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_doc_id = false;
  bool isset_raw_id = false;
  bool isset_product_id = false;
  bool isset_breed_id = false;
  bool isset_min_price = false;
  bool isset_max_price = false;
  bool isset_updated_time = false;
  bool isset_mobile = false;
  bool isset_spec = false;
  bool isset_pics = false;
  bool isset_supply_city_id = false;
  bool isset_supply_county_id = false;
  bool isset_customer_id = false;
  bool isset_created_time = false;
  bool isset_supply_longitude = false;
  bool isset_supply_latitude = false;
  bool isset_supply_province_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->doc_id);
          isset_doc_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->raw_id);
          isset_raw_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->product_id);
          isset_product_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->breed_id);
          isset_breed_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_price);
          isset_min_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_price);
          isset_max_price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->updated_time);
          isset_updated_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mobile);
          isset_mobile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->spec);
          isset_spec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pics);
          isset_pics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->supply_city_id);
          isset_supply_city_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->supply_county_id);
          isset_supply_county_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->customer_id);
          isset_customer_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->created_time);
          isset_created_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->supply_longitude);
          isset_supply_longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->supply_latitude);
          isset_supply_latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->supply_province_id);
          isset_supply_province_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->names.read(iprot);
          this->__isset.names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_doc_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_raw_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_product_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_breed_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_min_price)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_max_price)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_updated_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mobile)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_spec)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_pics)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_supply_city_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_supply_county_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_customer_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_created_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_supply_longitude)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_supply_latitude)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_supply_province_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RawDoc::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RawDoc");

  xfer += oprot->writeFieldBegin("doc_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->doc_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("raw_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->raw_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("product_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->product_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("breed_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->breed_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_price", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->min_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_price", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->max_price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updated_time", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->updated_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mobile", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->mobile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("spec", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->spec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pics", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->pics);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supply_city_id", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->supply_city_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supply_county_id", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->supply_county_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customer_id", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->customer_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created_time", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->created_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supply_longitude", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->supply_longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supply_latitude", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->supply_latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supply_province_id", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->supply_province_id);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.names) {
    xfer += oprot->writeFieldBegin("names", ::apache::thrift::protocol::T_STRUCT, 18);
    xfer += this->names.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RawDoc &a, RawDoc &b) {
  using ::std::swap;
  swap(a.doc_id, b.doc_id);
  swap(a.raw_id, b.raw_id);
  swap(a.product_id, b.product_id);
  swap(a.breed_id, b.breed_id);
  swap(a.min_price, b.min_price);
  swap(a.max_price, b.max_price);
  swap(a.updated_time, b.updated_time);
  swap(a.mobile, b.mobile);
  swap(a.spec, b.spec);
  swap(a.pics, b.pics);
  swap(a.supply_city_id, b.supply_city_id);
  swap(a.supply_county_id, b.supply_county_id);
  swap(a.customer_id, b.customer_id);
  swap(a.created_time, b.created_time);
  swap(a.supply_longitude, b.supply_longitude);
  swap(a.supply_latitude, b.supply_latitude);
  swap(a.supply_province_id, b.supply_province_id);
  swap(a.names, b.names);
  swap(a.__isset, b.__isset);
}


