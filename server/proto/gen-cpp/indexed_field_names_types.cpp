/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "indexed_field_names_types.h"

#include <algorithm>



const char* IndexedFieldNames::ascii_fingerprint = "DFFD290DFC35F6F1BE0790E5EC0C6B55";
const uint8_t IndexedFieldNames::binary_fingerprint[16] = {0xDF,0xFD,0x29,0x0D,0xFC,0x35,0xF6,0xF1,0xBE,0x07,0x90,0xE5,0xEC,0x0C,0x6B,0x55};

uint32_t IndexedFieldNames::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_product_id = false;
  bool isset_breed_id = false;
  bool isset_supply_province_id = false;
  bool isset_supply_city_id = false;
  bool isset_supply_county_id = false;
  bool isset_page_size = false;
  bool isset_page_no = false;
  bool isset_hit_all_words = false;
  bool isset_add_doc = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->product_id);
          isset_product_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->breed_id);
          isset_breed_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->supply_province_id);
          isset_supply_province_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->supply_city_id);
          isset_supply_city_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->supply_county_id);
          isset_supply_county_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->page_size);
          isset_page_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->page_no);
          isset_page_no = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hit_all_words);
          isset_hit_all_words = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->add_doc);
          isset_add_doc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_product_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_breed_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_supply_province_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_supply_city_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_supply_county_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_page_size)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_page_no)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hit_all_words)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_add_doc)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t IndexedFieldNames::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IndexedFieldNames");

  xfer += oprot->writeFieldBegin("product_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->product_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("breed_id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->breed_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supply_province_id", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->supply_province_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supply_city_id", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->supply_city_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supply_county_id", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->supply_county_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("page_size", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->page_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("page_no", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->page_no);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hit_all_words", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->hit_all_words);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("add_doc", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->add_doc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IndexedFieldNames &a, IndexedFieldNames &b) {
  using ::std::swap;
  swap(a.product_id, b.product_id);
  swap(a.breed_id, b.breed_id);
  swap(a.supply_province_id, b.supply_province_id);
  swap(a.supply_city_id, b.supply_city_id);
  swap(a.supply_county_id, b.supply_county_id);
  swap(a.page_size, b.page_size);
  swap(a.page_no, b.page_no);
  swap(a.hit_all_words, b.hit_all_words);
  swap(a.add_doc, b.add_doc);
}


