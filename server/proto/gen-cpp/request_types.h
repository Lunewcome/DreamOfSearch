/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef request_TYPES_H
#define request_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "indexed_field_names_types.h"
#include "url_params_types.h"




typedef struct _RequestParams__isset {
  _RequestParams__isset() : product_id(false), breed_id(false), supply_province_id(false), supply_city_id(false), supply_county_id(false), page_size(false), page_no(false), hit_all_words(true) {}
  bool product_id;
  bool breed_id;
  bool supply_province_id;
  bool supply_city_id;
  bool supply_county_id;
  bool page_size;
  bool page_no;
  bool hit_all_words;
} _RequestParams__isset;

class RequestParams {
 public:

  static const char* ascii_fingerprint; // = "EBF4C507073E938D6181F5C4272924C5";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0xF4,0xC5,0x07,0x07,0x3E,0x93,0x8D,0x61,0x81,0xF5,0xC4,0x27,0x29,0x24,0xC5};

  RequestParams() : product_id(0), breed_id(0), supply_province_id(0), supply_city_id(0), supply_county_id(0), page_size(0), page_no(0), hit_all_words(true) {
  }

  virtual ~RequestParams() throw() {}

   ::UrlParams url_params;
  int32_t product_id;
  int32_t breed_id;
  int32_t supply_province_id;
  int32_t supply_city_id;
  int32_t supply_county_id;
  int32_t page_size;
  int32_t page_no;
  bool hit_all_words;
   ::IndexedFieldNames names;

  _RequestParams__isset __isset;

  void __set_url_params(const  ::UrlParams& val) {
    url_params = val;
  }

  void __set_product_id(const int32_t val) {
    product_id = val;
    __isset.product_id = true;
  }

  void __set_breed_id(const int32_t val) {
    breed_id = val;
    __isset.breed_id = true;
  }

  void __set_supply_province_id(const int32_t val) {
    supply_province_id = val;
    __isset.supply_province_id = true;
  }

  void __set_supply_city_id(const int32_t val) {
    supply_city_id = val;
    __isset.supply_city_id = true;
  }

  void __set_supply_county_id(const int32_t val) {
    supply_county_id = val;
    __isset.supply_county_id = true;
  }

  void __set_page_size(const int32_t val) {
    page_size = val;
    __isset.page_size = true;
  }

  void __set_page_no(const int32_t val) {
    page_no = val;
    __isset.page_no = true;
  }

  void __set_hit_all_words(const bool val) {
    hit_all_words = val;
    __isset.hit_all_words = true;
  }

  void __set_names(const  ::IndexedFieldNames& val) {
    names = val;
  }

  bool operator == (const RequestParams & rhs) const
  {
    if (!(url_params == rhs.url_params))
      return false;
    if (__isset.product_id != rhs.__isset.product_id)
      return false;
    else if (__isset.product_id && !(product_id == rhs.product_id))
      return false;
    if (__isset.breed_id != rhs.__isset.breed_id)
      return false;
    else if (__isset.breed_id && !(breed_id == rhs.breed_id))
      return false;
    if (__isset.supply_province_id != rhs.__isset.supply_province_id)
      return false;
    else if (__isset.supply_province_id && !(supply_province_id == rhs.supply_province_id))
      return false;
    if (__isset.supply_city_id != rhs.__isset.supply_city_id)
      return false;
    else if (__isset.supply_city_id && !(supply_city_id == rhs.supply_city_id))
      return false;
    if (__isset.supply_county_id != rhs.__isset.supply_county_id)
      return false;
    else if (__isset.supply_county_id && !(supply_county_id == rhs.supply_county_id))
      return false;
    if (__isset.page_size != rhs.__isset.page_size)
      return false;
    else if (__isset.page_size && !(page_size == rhs.page_size))
      return false;
    if (__isset.page_no != rhs.__isset.page_no)
      return false;
    else if (__isset.page_no && !(page_no == rhs.page_no))
      return false;
    if (__isset.hit_all_words != rhs.__isset.hit_all_words)
      return false;
    else if (__isset.hit_all_words && !(hit_all_words == rhs.hit_all_words))
      return false;
    if (!(names == rhs.names))
      return false;
    return true;
  }
  bool operator != (const RequestParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestParams &a, RequestParams &b);



#endif
